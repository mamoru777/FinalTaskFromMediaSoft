// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: restaurant_order.proto

package restaurant

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUpToDateOrderListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUpToDateOrderListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUpToDateOrderListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUpToDateOrderListRequestMultiError, or nil if none found.
func (m *GetUpToDateOrderListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUpToDateOrderListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUpToDateOrderListRequestMultiError(errors)
	}

	return nil
}

// GetUpToDateOrderListRequestMultiError is an error wrapping multiple
// validation errors returned by GetUpToDateOrderListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUpToDateOrderListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUpToDateOrderListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUpToDateOrderListRequestMultiError) AllErrors() []error { return m }

// GetUpToDateOrderListRequestValidationError is the validation error returned
// by GetUpToDateOrderListRequest.Validate if the designated constraints
// aren't met.
type GetUpToDateOrderListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUpToDateOrderListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUpToDateOrderListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUpToDateOrderListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUpToDateOrderListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUpToDateOrderListRequestValidationError) ErrorName() string {
	return "GetUpToDateOrderListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUpToDateOrderListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUpToDateOrderListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUpToDateOrderListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUpToDateOrderListRequestValidationError{}

// Validate checks the field values on GetUpToDateOrderListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUpToDateOrderListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUpToDateOrderListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUpToDateOrderListResponseMultiError, or nil if none found.
func (m *GetUpToDateOrderListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUpToDateOrderListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTotalOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUpToDateOrderListResponseValidationError{
						field:  fmt.Sprintf("TotalOrders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUpToDateOrderListResponseValidationError{
						field:  fmt.Sprintf("TotalOrders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUpToDateOrderListResponseValidationError{
					field:  fmt.Sprintf("TotalOrders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTotalOrdersByCompany() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUpToDateOrderListResponseValidationError{
						field:  fmt.Sprintf("TotalOrdersByCompany[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUpToDateOrderListResponseValidationError{
						field:  fmt.Sprintf("TotalOrdersByCompany[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUpToDateOrderListResponseValidationError{
					field:  fmt.Sprintf("TotalOrdersByCompany[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUpToDateOrderListResponseMultiError(errors)
	}

	return nil
}

// GetUpToDateOrderListResponseMultiError is an error wrapping multiple
// validation errors returned by GetUpToDateOrderListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUpToDateOrderListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUpToDateOrderListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUpToDateOrderListResponseMultiError) AllErrors() []error { return m }

// GetUpToDateOrderListResponseValidationError is the validation error returned
// by GetUpToDateOrderListResponse.Validate if the designated constraints
// aren't met.
type GetUpToDateOrderListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUpToDateOrderListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUpToDateOrderListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUpToDateOrderListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUpToDateOrderListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUpToDateOrderListResponseValidationError) ErrorName() string {
	return "GetUpToDateOrderListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUpToDateOrderListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUpToDateOrderListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUpToDateOrderListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUpToDateOrderListResponseValidationError{}

// Validate checks the field values on OrdersByOffice with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrdersByOffice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrdersByOffice with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrdersByOfficeMultiError,
// or nil if none found.
func (m *OrdersByOffice) ValidateAll() error {
	return m.validate(true)
}

func (m *OrdersByOffice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OfficeUuid

	// no validation rules for OfficeName

	// no validation rules for OfficeAddress

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrdersByOfficeValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrdersByOfficeValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrdersByOfficeValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrdersByOfficeMultiError(errors)
	}

	return nil
}

// OrdersByOfficeMultiError is an error wrapping multiple validation errors
// returned by OrdersByOffice.ValidateAll() if the designated constraints
// aren't met.
type OrdersByOfficeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrdersByOfficeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrdersByOfficeMultiError) AllErrors() []error { return m }

// OrdersByOfficeValidationError is the validation error returned by
// OrdersByOffice.Validate if the designated constraints aren't met.
type OrdersByOfficeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrdersByOfficeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrdersByOfficeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrdersByOfficeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrdersByOfficeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrdersByOfficeValidationError) ErrorName() string { return "OrdersByOfficeValidationError" }

// Error satisfies the builtin error interface
func (e OrdersByOfficeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrdersByOffice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrdersByOfficeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrdersByOfficeValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for ProductName

	// no validation rules for Count

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}
