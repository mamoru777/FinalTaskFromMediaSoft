// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: customer_office.proto

package customer

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateOfficeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOfficeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOfficeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOfficeRequestMultiError, or nil if none found.
func (m *CreateOfficeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOfficeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 6 {
		err := CreateOfficeRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 6 {
		err := CreateOfficeRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOfficeRequestMultiError(errors)
	}

	return nil
}

// CreateOfficeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOfficeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOfficeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOfficeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOfficeRequestMultiError) AllErrors() []error { return m }

// CreateOfficeRequestValidationError is the validation error returned by
// CreateOfficeRequest.Validate if the designated constraints aren't met.
type CreateOfficeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfficeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfficeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfficeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfficeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfficeRequestValidationError) ErrorName() string {
	return "CreateOfficeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfficeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfficeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfficeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfficeRequestValidationError{}

// Validate checks the field values on CreateOfficeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOfficeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOfficeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOfficeResponseMultiError, or nil if none found.
func (m *CreateOfficeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOfficeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOfficeResponseMultiError(errors)
	}

	return nil
}

// CreateOfficeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOfficeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOfficeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOfficeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOfficeResponseMultiError) AllErrors() []error { return m }

// CreateOfficeResponseValidationError is the validation error returned by
// CreateOfficeResponse.Validate if the designated constraints aren't met.
type CreateOfficeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfficeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfficeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfficeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfficeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfficeResponseValidationError) ErrorName() string {
	return "CreateOfficeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfficeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfficeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfficeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfficeResponseValidationError{}

// Validate checks the field values on GetOfficeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOfficeListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOfficeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOfficeListRequestMultiError, or nil if none found.
func (m *GetOfficeListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOfficeListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOfficeListRequestMultiError(errors)
	}

	return nil
}

// GetOfficeListRequestMultiError is an error wrapping multiple validation
// errors returned by GetOfficeListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOfficeListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOfficeListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOfficeListRequestMultiError) AllErrors() []error { return m }

// GetOfficeListRequestValidationError is the validation error returned by
// GetOfficeListRequest.Validate if the designated constraints aren't met.
type GetOfficeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOfficeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOfficeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOfficeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOfficeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOfficeListRequestValidationError) ErrorName() string {
	return "GetOfficeListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOfficeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOfficeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOfficeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOfficeListRequestValidationError{}

// Validate checks the field values on GetOfficeListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOfficeListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOfficeListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOfficeListResponseMultiError, or nil if none found.
func (m *GetOfficeListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOfficeListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOfficeListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOfficeListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOfficeListResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOfficeListResponseMultiError(errors)
	}

	return nil
}

// GetOfficeListResponseMultiError is an error wrapping multiple validation
// errors returned by GetOfficeListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOfficeListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOfficeListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOfficeListResponseMultiError) AllErrors() []error { return m }

// GetOfficeListResponseValidationError is the validation error returned by
// GetOfficeListResponse.Validate if the designated constraints aren't met.
type GetOfficeListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOfficeListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOfficeListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOfficeListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOfficeListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOfficeListResponseValidationError) ErrorName() string {
	return "GetOfficeListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOfficeListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOfficeListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOfficeListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOfficeListResponseValidationError{}

// Validate checks the field values on Office with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Office) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Office with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OfficeMultiError, or nil if none found.
func (m *Office) ValidateAll() error {
	return m.validate(true)
}

func (m *Office) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Name

	// no validation rules for Address

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OfficeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OfficeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OfficeMultiError(errors)
	}

	return nil
}

// OfficeMultiError is an error wrapping multiple validation errors returned by
// Office.ValidateAll() if the designated constraints aren't met.
type OfficeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfficeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfficeMultiError) AllErrors() []error { return m }

// OfficeValidationError is the validation error returned by Office.Validate if
// the designated constraints aren't met.
type OfficeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfficeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfficeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfficeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfficeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfficeValidationError) ErrorName() string { return "OfficeValidationError" }

// Error satisfies the builtin error interface
func (e OfficeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOffice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfficeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfficeValidationError{}
